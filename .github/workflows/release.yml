name: Deploy on release

on:
  release:
    types: [published]

jobs:
    
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm --prefix users/authservice ci
      - run: npm --prefix users/userservice ci
      - run: npm --prefix questionservice ci
      - run: npm --prefix gatewayservice ci
      - run: npm --prefix webapp ci
      - run: npm --prefix users/authservice test -- --coverage
      - run: npm --prefix users/userservice test -- --coverage
      - run: npm --prefix questionservice test -- --coverage
      - run: npm --prefix gatewayservice test -- --coverage
      - run: npm --prefix webapp test -- --coverage
      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  e2e-tests:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm --prefix users/utils install
      - run: npm --prefix users/authservice install
      - run: npm --prefix users/userservice install
      - run: npm --prefix gatewayservice install
      - run: npm --prefix webapp install
      - run: npm --prefix questionservice install
      - run: npm --prefix webapp run build
      - run: sudo setcap 'cap_net_bind_service=+ep' `which node`
      - run: npm --prefix webapp run test:e2eci

  docker-push-webapp:
    name: Push webapp Docker Image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Setup certificate
        run: |
          mkdir -p webapp/certificate
          echo -e "${{ secrets.CERTIFICATE }}" > webapp/certificate/certificate.crt
          echo -e "${{ secrets.CERTIFICATE_KEY }}" > webapp/certificate/certificatekey.key
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        env:
          API_URI: https://kawgame.xyz:8000
        with:
          name: arquisoft/wiq_en3b/webapp
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          workdir: webapp
          buildargs: API_URI

  docker-push-authservice:
    name: Push auth service Docker Image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        env:
          JWT_KEY: ${{ secrets.JWT_KEY }}
        with:
          name: arquisoft/wiq_en3b/authservice
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          workdir: users/authservice
          buildargs: JWT_KEY

  docker-push-userservice:
    name: Push user service Docker Image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        env:
          JWT_KEY: ${{ secrets.JWT_KEY }}
        with:
          name: arquisoft/wiq_en3b/userservice
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          workdir: users/userservice
          buildargs: JWT_KEY

  docker-push-questionservice:
    name: Push question service Docker Image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        env:
          TRANSLATION_API_KEY: ${{ secrets.TRANSLATION_API_KEY }}
        with:
          name: arquisoft/wiq_en3b/questionservice
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          workdir: questionservice
          buildargs: TRANSLATION_API_KEY
      
  docker-push-gatewayservice:
    name: Push gateway service Docker Image to GitHub Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: OpenAPI Configuration
        run: |
          DEPLOY_HOST=${{ secrets.DEPLOY_HOST }}
          sed -i "s/SOMEIP/${DEPLOY_HOST}/g" gatewayservice/openapi.yaml
      - name: Setup certificate
        run: |
          mkdir -p gatewayservice/certificate
          echo -e "${{ secrets.CERTIFICATE }}" > gatewayservice/certificate/certificate.crt
          echo -e "${{ secrets.CERTIFICATE_KEY }}" > gatewayservice/certificate/certificatekey.key
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@v5
        env:
          GATEWAY_URI: https://${{ secrets.DEPLOY_HOST }}:8000
          WEBAPP_URI: https://${{ secrets.DEPLOY_HOST }}:443
        with:
          name: arquisoft/wiq_en3b/gatewayservice
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          workdir: gatewayservice
          buildargs: GATEWAY_URI,WEBAPP_URI
  
  deploy:
    name: Deploy over SSH
    runs-on: ubuntu-latest
    needs: [docker-push-userservice, docker-push-authservice, docker-push-questionservice, docker-push-gatewayservice,docker-push-webapp]
    steps:      
      - name: Deploy over SSH
        uses: fifsky/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          user: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          command: |
            rm -rf wiq_en3b
            rm -rf gatewayservice
            git clone https://github.com/Arquisoft/wiq_en3b.git
            cp -r ./wiq_en3b/gatewayservice/ .
            echo -e "${{ secrets.CERTIFICATE }}" > gatewayservice/certificate/certificate.crt
            echo -e "${{ secrets.CERTIFICATE_KEY }}" > gatewayservice/certificate/certificatekey.key
            wget https://raw.githubusercontent.com/arquisoft/wiq_en3b/master/docker-compose.yml -O docker-compose.yml
            wget https://raw.githubusercontent.com/arquisoft/wiq_en3b/master/.env
            docker compose --profile prod down
            docker compose --profile prod up -d --pull always
            docker exec grafana-defaultASW grafana-cli admin reset-admin-password ${{ secrets.GRAFANA_PASSWORD }}
