openapi: 3.0.0
info:
  title: Know and Win API
  description: KaW specification for Question and User APIs.
  termsOfService: https://www.termsfeed.com/live/22f50af4-4278-43ba-856e-3b568b4361d7
  contact:
    name: KaW Support
    url: https://github.com/Arquisoft/wiq_en3b
    email: uo287866@uniovi.es
  version: 0.2.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://SOMEIP:8000
    description: Production server
paths:

  /health:
    get:
      summary: Check the health status of the service.
      operationId: checkHealth
      tags:
        - Default
      responses:
        200:
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Response status.
                    example: success
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Health status description
                        example: Service is running smoothly

  /questions:
    
    get:
      summary: Generates random questions together with its 4 possible answers using Wikidata API.
      tags:
        - Question Service
      operationId: generateQuestions
      parameters:
        - $ref: '#/components/parameters/questionSize'
      responses:
        200:
          description: Service has generated the requested number of questions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllQuestions'
              example:
                - id: 0
                  question: On which year was UAE founded?
                  answers:
                    - id: 1
                      text: 1971
                    - id: 2
                      text: 1768
                    - id: 3
                      text: 862
                    - id: 4
                      text: 1945
                  correctAnswerId: 1
                - id: 1
                  question: What is the Capital of Uganda?
                  answers:
                    - id: 1
                      text: Kampala
                    - id: 2
                      text: Dodoma
                    - id: 3
                      text: Santiago
                    - id: 4
                      text: Port-au-Prince
                  correctAnswerId: 1               
        400:
          description: Client has made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
              examples:
                sizeMissing:
                  summary: Client has not provided any size
                  value:
                    status: Fail
                    data:
                      error: You need to provide a size for questions to be generated!
                typeMissing:
                  summary: Client has provided a size but is not a number
                  value:
                    status: Fail
                    data:
                      error: The size parameter must be a number                 
        500:
          description: An internal server error has occured. Either DB related, Wikidata API or others.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorQSResponse'
              example:
                status: fail
                message: Can't generate questions! Internal server error

  /history:

    get:
      summary: Gets the game historical related to a user.
      tags:
        - User Service
      operationId: userHistory
      parameters:
        - $ref: '#/components/parameters/userParam'
      responses:
        200:
          description: Service has retrieved the history for given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserHistoryResponse'
              example:
                status: success
                data:
                  history:
                    passedQuestions: 20
                    failedQuestions: 20
                    gamesPlayed: 4
                    timePlayed: 20
                    points: 200
        400:
          description: Client has made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
              examples:
                userMissing:
                  summary: Client has not provided any user
                  value:
                    status: Fail
                    data:
                      error: The user parameter is missing
                userNotFound:
                  summary: Client has provided a user but has not been registered
                  value:
                    status: Fail
                    data:
                      error: The provided user <query_parameter> is not registered in the application      

  /history/leaderboard:
    get:
      summary: Gets the leaderboard for the KaW game.
      tags:
        - User Service
      operationId: userLeaderboard
      parameters:
        - $ref: '#/components/parameters/leaderboardSize'
      responses:
        200:
          description: Service has retrieved the leaderboard with the number of users requested in Descending order of points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
              example:
                status: success
                data:
                  - username: pepe
                    history:
                      passedQuestions: 20
                      failedQuestions: 20
                      gamesPlayed: 4
                      timePlayed: 20
                      points: 200
                  - username: maria
                    history:
                      passedQuestions: 30
                      failedQuestions: 30
                      gamesPlayed: 6
                      timePlayed: 40
                      points: 500
        400:
          description: Client has made a bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
              examples:
                badSize:
                  summary: Client has provided a 0 or negative size for leaderboard 
                  value:
                    status: Fail
                    data:
                      error: The size must be a positive value.
             
components:

  schemas:

    AllQuestions:
      type: array
      description: An array with n generated questions
      items:
        $ref: '#/components/schemas/QuestionJson'
      
    QuestionJson:
      type: object
      properties:
        id:
          type: integer
          description: An identifier number for the question generated.
        question:
          type: string
          description: The question generated using Wikidata API.
        answers:
          type: array
          description: The 4 possible answers to the previously generated question.
          items:
            type: object
            properties:
              id:
                type: integer
                description: An identifier number for the answer generated
              text:
                type: string
                description: A possible answer to the question generated
        correctAnswerId:
          type: string
          description: The identifier of the correct answer.

    ClientErrorResponse:
      type: object
      properties:
        status:
          type: string
          description: Status response
        data:
          type: object
          properties:
            error:
              description: The error message due to client error
              type: string
    
    ServerErrorQSResponse:
      type: object
      properties:
        status:
          type: string
          description: QuestionService status response
        message:
          type: string
          description: Error description

    UserHistoryResponse:
      type: object
      properties:
        status:
          type: string
          description: UserHistory status response
        data:
          type: object
          properties:
            history:
              $ref: '#/components/schemas/history'

    LeaderboardResponse:
      type: object
      properties:
        status:
          type: string
          description: Leaderboard status response
        data:
          type: object
          properties:
            username:
              type: string
              description: A user in leaderboard
            history:
              $ref: '#/components/schemas/history'
               
    history:
      type: object
      properties:
        passedQuestions:
          type: integer
          description: The number of passed questions from all the played games
        failedQuestions:
          type: integer
          description: The number of failed questions from all the played games
        gamesPlayed:
          type: integer
          description: The total number of played games
        timePlayed:
          type: integer
          description: The total time spent on playing the game
        points:
          type: integer
          description: The total number of poinst obtained through all games


  parameters:
    
    questionSize:
      name: size
      in: query
      description: Number of questions to be generated.
      required: true
      schema:
        type: integer
      examples:
        size-example:
          summary: Retrieving 5 random questions.
          value: 5
    
    leaderboardSize:
      name: size
      in: query
      description: Number users to retrieve in leaderboard.
      required: false
      schema:
        type: integer
      default: 10
      minimum: 1
      examples:
        size-example:
          summary: Retrieving the top 3 players.
          value: 3
  
    userParam:
      name: user
      in: query
      description: The user to get history from.
      required: true
      schema:
        type: string
      examples:
        user-example:
          summary: Retrieving history from pepe user.
          value: pepe

tags:
  - name: Default
    description: Other helpful endpoints
  - name: Question Service
    description: Endpoints related to the generation of questions.
  - name: User Service
    description: Endpoints that retrieve user information from the game.